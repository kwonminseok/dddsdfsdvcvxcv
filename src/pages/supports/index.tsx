import Head from "next/head"
import { Inter } from "next/font/google"
import { useState } from "react"
import { Box, Flex, Selector } from "@components/commons"
import { SkeletonSupportCard, SupportCard } from "@components/supports"
import axios from "axios"
import { useInfiniteQuery } from "@tanstack/react-query"
import { useInView } from "react-intersection-observer"

export default function Supports() {
  const [ref, isView] = useInView()
  const [order, setOrder] = useState<string>("lastest")
  const fetchSupport = async ({ pageParam = 1 }) => {
    const res = await axios.get(`/api/supports/list?page=${pageParam}`)
    const result = res.data
    return {
      result: result,
      nextPage: pageParam + 1,
      isLast: result.data.length < 10,
    }
  }
  const { data, error, fetchNextPage, hasNextPage, isSuccess, isFetching, isFetchingNextPage, status } =
    useInfiniteQuery({
      queryKey: ["getSupports"],
      queryFn: fetchSupport,
      getNextPageParam: (lastPage, pages) => {
        if (!lastPage.isLast) return lastPage.nextPage
        return undefined
      },
      refetchOnWindowFocus: false,
      refetchOnReconnect: true,
      retry: 1,
    })
  const onChangeOrder = (newOrder: string) => {
    if (newOrder !== order) {
      setOrder(newOrder)
      // mutation.mutate(category[activeTab].baseUrl)
    }
  }

  return (
    <>
      <Head>
        <title>Supports</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      {/* <link rel="icon" href="/favicon.ico" /> */}
      <Box
        as="main"
        sx={{
          display: "flex",
          flexDirection: "column",
          minHeight: "100vh",
          alignItems: "center",
          py: 8,
        }}
      >
        <Flex sx={{ flexDirection: "column", alignItems: "center", pb: [6, 12] }}>
          <Box
            sx={{
              fontSize: ["32px", "72px"],
              fontWeight: "bold",
              lineHeight: ["40px", "80px"],
              pb: [3, 6],
            }}
          >
            Love & Action
          </Box>
          <Box sx={{ fontSize: ["14px", "16px"] }}>당신의 사랑을 표현하고 행동해 보세요</Box>
        </Flex>
        <Box
          __css={{
            maxWidth: "1260px",
            width: "100%",
            marginX: "auto",
            px: ["12px", "30px"],
          }}
        >
          <Flex direction={"row-reverse"} pb="4">
            <Selector
              options={[
                { content: "인기 순", key: "popular" },
                { content: "최근 순", key: "lastest" },
              ]}
              value={order} //초기값됴
              onChange={onChangeOrder}
              sx={{
                fontSize: [1, 2],
                lineHeight: "26px",
                padding: "6px 12px",
                color: "black90",
                width: ["96px", "120px"],
                height: ["32px", "40px"],
              }}
            />
          </Flex>
        </Box>
        <Box
          sx={{
            maxWidth: "1260px",
            width: "100%",
            mx: "auto",
            px: ["12px", "30px"],
          }}
        >
          <Box
            sx={{
              width: "100%",
              height: "100%",
              position: "relative",
              overflow: "hidden",
            }}
          >
            <Box
              sx={{
                width: "100%",
                display: ["flex", "grid"],
                flexDirection: "column",
                gap: ["8px", "24px"],
                gridTemplateColumns: "repeat(4, calc(25% - 18px))",
                pt: 3,
              }}
            >
              {isSuccess && data.pages
                ? data.pages.map((datas, page_num) => {
                    const supports = datas.result.data
                    return supports.map((support: any, idx: number) => {
                      if (page_num == data.pages.length - 1 && supports.length - 1 == idx) {
                        return <SupportCard ref={ref} key={support._id} {...support} />
                      } else {
                        return <SupportCard key={support._id} {...support} />
                      }
                    })
                  })
                : null}

              {isFetching && (
                <>
                  {" "}
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                  <SkeletonSupportCard />
                </>
              )}
              {/* <SupportCard category="임영웅" maker={"임영웅 영웅시대"} name={"임영웅 2022 'IM HERO'콘서트 잠실 주 경기장 대관 후원"} supports={12} />
              <SupportCard category="임영웅" maker={"임영웅 영웅시대"} name={"임영웅 2022 'IM HERO'콘서트 잠실 주 경기장 대관 후원"} supports={12} /> <SupportCard category="임영웅" maker={"임영웅 영웅시대"} name={"임영웅 2022 'IM HERO'콘서트 잠실 주 경기장 대관 후원"} supports={12} />{" "}
              <SupportCard category="임영웅" maker={"임영웅 영웅시대"} name={"임영웅 2022 'IM HERO'콘서트 잠실 주 경기장 대관 후원"} supports={12} /> <SupportCard category="임영웅" maker={"임영웅 영웅시대"} name={"임영웅 2022 'IM HERO'콘서트 잠실 주 경기장 대관 후원"} supports={12} />
              <SkeletonSupportCard /> */}
            </Box>
          </Box>
        </Box>
      </Box>
    </>
  )
}
