import Head from "next/head"
import { Box, Flex, Skeleton } from "@components/commons"
import Wrapper from "@components/supports/[pid]/Wrapper"
import ImageWrapper from "@components/imageWrapper"
import { SupportStory, DetailInfo, MakerInfo, SupportInfo, MemberList } from "@components/supports/[pid]"
import BlockInfo from "../../../components/supports/[pid]/block-info"
import useWindowSize from "@libs/hooks/use-window-size"

import { useQuery, useMutation } from "@tanstack/react-query"
import axios from "axios"
import { useEffect } from "react"
import { GetServerSideProps } from "next"
export default function Support({ pid }: any) {
  const sizeType = useWindowSize()
  const fetchSupport = async () => {
    if (pid) {
      const res = await axios.get(`/api/supports/info/${pid}`)
      const result = res.data

      return result
      //
    }
  }

  const { data, isLoading, error } = useQuery({ queryKey: ["support", pid], queryFn: fetchSupport })

  return (
    <>
      <Head>
        <title>Supports</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Wrapper>
        <Flex sx={{ flexWrap: "wrap", justifyContent: "space-between" }}>
          <Box sx={{ width: ["100%", "324px", "467px"] }}>
            {data?.mainImage ? (
              <ImageWrapper
                brProps="8px"
                src={data.mainImage}
                wrapperClassName="lazy-load-image-wrapper"
                effect="blur"
                wrapperProps={{
                  style: {
                    display: "flex",
                    width: "100%",
                    height: "100%",
                    borderRadius: "8px",
                    border: "0px solid",
                  },
                }}
                style={{
                  borderRadius: "8px",
                  objectFit: "contain",
                }}
              />
            ) : (
              <Skeleton sx={{ width: "100%", pb: "100%" }} />
            )}

            {(sizeType as number) > 0 && (
              <Box sx={{ pt: 6 }}>
                <SupportStory
                  sizeType={sizeType as number}
                  description={data && data.description}
                  subImages={data && data.subImages}
                />
                <DetailInfo sizeType={sizeType as number} attributes={data && data.attributes} />
                <MakerInfo sizeType={sizeType as number} />
                <BlockInfo sizeType={sizeType as number} />
              </Box>
            )}
          </Box>
          <Flex
            sx={{
              flex: 1,
              flexDirection: "column",
              width: "auto",
              position: "relative",
              ml: [1, "90px"],
              mt: [6, 0],
            }}
          >
            <SupportInfo
              maker={data && data.maker}
              title={data && data.title}
              useMintPeriod={data && data.useMintPeriod}
              startMintDate={data && data.startMintDate}
              endMintDate={data && data.endMintDate}
            />
            {/* <SupportInfo 
            /> */}
            {(sizeType as number) > 0 && <MemberList totalMinted={data && data.totalMinted} />}
          </Flex>
        </Flex>
        {(sizeType as number) < 1 && (
          <Box sx={{ width: "auto" }}>
            <SupportStory
              sizeType={sizeType as number}
              description={data && data.description}
              subImages={data && data.subImages}
            />
            <DetailInfo sizeType={sizeType as number} attributes={data && data.attributes} />
            <BlockInfo sizeType={sizeType as number} />
            <MakerInfo sizeType={sizeType as number} />
            <MemberList totalMinted={data && data.totalMinted} />
          </Box>
        )}
      </Wrapper>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async context => {
  console.log("server side")

  const { pid } = context.query
  console.log(pid)
  return {
    props: {
      pid,
    },
  }
}
