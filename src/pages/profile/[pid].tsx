import Head from "next/head"
import { Box, Flex, Selector } from "@components/commons"
import { SupportCard, SkeletonSupportCard } from "@components/profile"
import UserInfo from "@components/profile/user-info"
import { TabsContainer, Tab, TabList, Panel } from "@components/commons/Tabs/tab"
import axios from "axios"
import { useQuery, useInfiniteQuery } from "@tanstack/react-query"
import { useInView } from "react-intersection-observer"
import { useState, useEffect, useCallback } from "react"
import { createPortal } from "react-dom"
import { GetServerSideProps } from "next"
import { serverSideTranslations } from "next-i18next/serverSideTranslations"
import { useTranslation } from "next-i18next"
export default function Profile({ pid }: any) {
  const { t } = useTranslation(["common"])
  const [filter, setFilter] = useState<string>("latest")
  const [order, setOrder] = useState<number>(-1)
  const [count, setCount] = useState<number>(0)
  const onChangeOrder = (newOrder: string) => {
    if (newOrder !== filter) {
      if (newOrder == "latest") {
        setOrder(-1)
      } else if (newOrder == "oldest") {
        setOrder(1)
      }
      setCount(prev => prev + 1)
      setFilter(newOrder)
    }
  }
  const [ref, isView] = useInView()
  const fetchUserProfile = async () => {
    if (pid) {
      const res = await axios.get(`/api/profile/user-info/${pid}`)
      const result = res.data

      return result
    }
  }

  const fetchUserNfts = useCallback(
    async ({ pageParam = 1 }) => {
      if (pid) {
        const res = await axios.get(`/api/profile/nfts/${pid}?page=${pageParam}&order=${order}`)
        const result = res.data
        console.log(result)
        return {
          result: result.data,
          nextPage: pageParam + 1,
          isLast: result.data.length < 10,
        }
      }
    },
    [order],
  )

  const userInfo = useQuery({
    queryKey: ["userinfo", pid],
    queryFn: fetchUserProfile,
    retry: 1,
    refetchOnReconnect: true,
  })
  const userNfts = useInfiniteQuery({
    queryKey: ["usernfts", pid, count],
    queryFn: fetchUserNfts,
    getNextPageParam: (lastPage, pages) => {
      if (!lastPage!.isLast) return lastPage!.nextPage
      return undefined
    },
    refetchOnWindowFocus: false,
    refetchOnReconnect: true,
    retry: 1,
  })

  const [isOpen, setIsOpen] = useState(false)
  useEffect(() => {
    //감지 및 fetch
    if (isView && userNfts.hasNextPage) userNfts.fetchNextPage()
  }, [isView])

  const toggleDropdown = () => {
    setIsOpen(!isOpen)
  }
  console.log(userNfts.data)
  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Flex as="main" sx={{ flexDirection: "column", flex: 1, pb: ["32px", "80px"] }}>
        <Box sx={{ pb: [0, "8px"] }}>
          <Box sx={{ maxWidth: "1260px", mx: "auto", pb: ["24px", "77px"], pt: ["72px"] }}>
            <UserInfo user={userInfo.data ? { ...userInfo.data.data } : undefined} />
          </Box>
        </Box>
        <Flex sx={{ position: "relative", justifyContent: "center" }}></Flex>
        <Box
          sx={{
            maxWidth: "1260px",
            width: "100%",
            mx: "auto",
            px: ["12px", "30px"],
          }}
        >
          <TabsContainer defaultActiveKey={"supports"}>
            <TabList tabsSx={{ mb: 7 }} variant="standard">
              <Tab tabKey="supports">{t("tab.profileSupport")}</Tab>
              {/* <Tab tabKey="activity">활동내역</Tab> */}
            </TabList>
            <Box
              sx={{
                width: "100%",
                height: "100%",
                position: "relative",
                overflow: "hidden",
              }}
            >
              <Panel tabKey="supports">
                <Box
                  sx={{
                    width: "100%",
                    height: "100%",
                    position: "relative",
                    overflow: "hidden",
                  }}
                >
                  <Flex direction={"row-reverse"} py="3">
                    <Selector
                      options={[
                        { content: t("latest"), key: "latest" },
                        { content: t("oldest"), key: "oldest" },
                      ]}
                      value={filter} //초기값됴
                      onChange={onChangeOrder}
                      sx={{
                        fontSize: [1, 2],
                        lineHeight: "26px",
                        padding: "6px 12px",
                        color: "black90",
                        width: ["96px", "120px"],
                        height: ["32px", "40px"],
                      }}
                    />
                  </Flex>
                  <Box
                    sx={{
                      width: "100%",
                      display: ["flex", "grid"],
                      flexDirection: "column",
                      gap: ["8px", "24px"],
                      gridTemplateColumns: "repeat(4, calc(25% - 20px))",
                    }}
                  >
                    {userNfts.isSuccess && userNfts.data.pages
                      ? userNfts.data.pages.map((nfts, page_num) => {
                          const nftlist = nfts!.result

                          return nftlist.map((nft: any, idx: number) => {
                            if (page_num == userNfts.data.pages.length - 1 && nftlist.length - 1 == idx) {
                              return (
                                <SupportCard key={nft._id} {...nft} ref={ref} supporter={userInfo.data.data.nickname} />
                              )
                            } else {
                              return <SupportCard {...nft} key={nft._id} supporter={userInfo.data.data.nickname} />
                            }
                          })
                        })
                      : null}
                    {userNfts.isFetching && (
                      <>
                        <SkeletonSupportCard />
                        <SkeletonSupportCard />
                        <SkeletonSupportCard />
                        <SkeletonSupportCard />
                        <SkeletonSupportCard />
                        <SkeletonSupportCard />
                      </>
                    )}
                  </Box>
                </Box>
              </Panel>
            </Box>
          </TabsContainer>
        </Box>
      </Flex>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ query, locale, locales }) => {
  if (locale == "default") {
    return {
      notFound: true,
    }
  }
  const { pid } = query

  return {
    props: {
      pid,
      ...(await serverSideTranslations(locale!, ["common", "header"])),
    },
  }
}
