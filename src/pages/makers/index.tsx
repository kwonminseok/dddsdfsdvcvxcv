import Head from "next/head"
import axios from "axios"
import { GetServerSideProps } from "next"
import { use, useEffect, useState } from "react"
import { Avatar, Box, Flex, Selector } from "@components/commons"
import MakerCard from "@components/makers/maker-card"
import { useInfiniteQuery } from "@tanstack/react-query"
import { useInView } from "react-intersection-observer"
import SkeletonMakerCard from "@components/makers/skeleton-maker-card"
export default function Makers() {
  const [order, setOrder] = useState<string>("lastest")
  const fetchMaker = async ({ pageParam = 1 }) => {
    const res = await axios.get(`/api/makers/list?page=${pageParam}`)
    const result = res.data
    return {
      result: result,
      nextPage: pageParam + 1,
      isLast: result.data.length < 10,
    }
  }
  const [ref, isView] = useInView()

  const { data, error, fetchNextPage, hasNextPage, isSuccess, isFetching, isFetchingNextPage, status } =
    useInfiniteQuery({
      queryKey: ["getMakers"],
      queryFn: fetchMaker,
      getNextPageParam: (lastPage, pages) => {
        if (!lastPage.isLast) return lastPage.nextPage
        return undefined
      },
      refetchOnWindowFocus: false,
      refetchOnReconnect: true,
      retry: 1,
    })

  const onChangeOrder = (newOrder: string) => {
    if (newOrder !== order) {
      setOrder(newOrder)
      // mutation.mutate(category[activeTab].baseUrl)
    }
  }

  console.log(data, status)
  console.log(isFetching)
  return (
    <>
      <Head>
        <title>Makers</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Flex
        as="main"
        sx={{
          flexDirection: "column",
          minHeight: "100vh",
          alignItems: "center",
          py: 8,
        }}
      >
        {/* Banner */}
        <Flex
          sx={{
            flexDirection: "column",
            alignItems: "center",
            pb: [6, 12],
            justifyContent: "center",
          }}
        >
          <Box
            sx={{
              fontSize: ["32px", "72px"],
              fontWeight: "bold",
              lineHeight: ["40px", "80px"],
              pb: [3, 6],
            }}
          >
            Super Makers
          </Box>
          <Box sx={{ fontSize: ["14px", "16px"], textAlign: "center" }}>
            멋진 서포터를 만드는 메이커들을 만나 보세요. 당신과 함께 할 멋진 메이커들
          </Box>
        </Flex>
        <Box
          __css={{
            maxWidth: "1260px",
            width: "100%",
            marginX: "auto",
            px: ["12px", "30px"],
          }}
        >
          <Flex direction={"row-reverse"} pb="4">
            <Selector
              options={[
                { content: "인기 순", key: "popular" },
                { content: "최근 순", key: "lastest" },
              ]}
              value={order} //초기값됴
              onChange={onChangeOrder}
              sx={{
                fontSize: [1, 2],
                lineHeight: "26px",
                padding: "6px 12px",
                color: "black90",
                width: ["96px", "120px"],
                height: ["32px", "40px"],
              }}
            />
          </Flex>
        </Box>
        <Box
          sx={{
            maxWidth: "1260px",
            width: "100%",
            marginX: "auto",
            px: ["12px", "30px"],
          }}
        >
          <Box
            sx={{
              width: "100%",
              height: "100%",
              position: "relative",
              overflow: "hidden",
              px: ["5px", 0],
            }}
          >
            <Box
              sx={{
                width: "100%",
                display: ["flex", "grid"],
                flexDirection: "column",
                gap: ["8px", "24px"],
                gridTemplateColumns: "repeat(3, calc(33.3% - 17px))",
                pt: 3,
              }}
            >
              {/* 1 maker */}
              {isSuccess && data.pages
                ? data.pages.map((datas, page_num) => {
                    const makers = datas.result.data
                    return makers.map((maker: any, idx: number) => {
                      if (page_num == data.pages.length - 1 && makers.length - 1 == idx) {
                        return <MakerCard ref={ref} key={maker._id} {...maker} />
                      } else {
                        return <MakerCard key={maker._id} {...maker} />
                      }
                    })
                  })
                : null}

              {isFetching && (
                <>
                  {" "}
                  <SkeletonMakerCard />
                  <SkeletonMakerCard />
                  <SkeletonMakerCard />
                  <SkeletonMakerCard />
                  <SkeletonMakerCard />
                  <SkeletonMakerCard />
                </>
              )}
            </Box>
          </Box>
        </Box>
      </Flex>
    </>
  )
}

// export const getServerSideProps: GetServerSideProps = async context => {
//   console.log("server side")
//   let maker = { total: 0, list: [] }
//   try {
//     const res = await axios.get("/api/makers/list?page=1")
//     if (res.status === 200) {
//       maker.total = res.total
//       maker.list = res.list
//     }
//   } catch (e) {
//     console.log("server sider error")
//     // console.log(e)
//   }
//   return {
//     props: {
//       maker,
//     },
//   }
// }
